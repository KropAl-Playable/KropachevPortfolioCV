---
export interface Item { id: string; title: string; src: string; }
export interface Props { items: Item[]; }
const { items = [] } = Astro.props;
const itemsJson = JSON.stringify(items ?? []);
---

<!-- Modal -->
<div id="playable-modal" class="fixed inset-0 z-[100] hidden">
  <!-- backdrop -->
  <div class="absolute inset-0 bg-black/70 backdrop-blur-sm"></div>

  <!-- panel -->
  <div class="relative mx-auto w-full max-w-6xl h-[84vh] mt-8 card overflow-hidden border border-surface-3 reveal">
    <!-- header -->
    <div class="flex items-center justify-between px-4 py-3 border-b border-surface-3">
      <div id="pm-title" class="font-semibold text-textc truncate pr-2">Playable</div>
      <div class="flex items-center gap-2">
        <button id="pm-prev" class="iconbtn" title="Prev" aria-label="Prev">
          <svg width="18" height="18" viewBox="0 0 24 24" fill="none"><path d="M15 6l-6 6 6 6" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"/></svg>
        </button>
        <button id="pm-next" class="iconbtn" title="Next" aria-label="Next">
          <svg width="18" height="18" viewBox="0 0 24 24" fill="none"><path d="M9 6l6 6-6 6" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"/></svg>
        </button>
        <button id="pm-close" class="iconbtn" title="Close" aria-label="Close">
          <svg width="18" height="18" viewBox="0 0 24 24" fill="none"><path d="M6 6l12 12M18 6L6 18" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"/></svg>
        </button>
      </div>
    </div>

    <!-- body -->
    <div class="relative w-full h-[calc(84vh-56px)] bg-surface-2 grid place-items-center p-4 sm:p-6">
      <!-- телефонная рамка -->
      <div class="relative bg-black rounded-[36px] border border-surface-3 shadow-soft phone-glass" style="aspect-ratio: 9 / 17.5; height: min(92vw, 980px);">

        <!-- челка -->
        <div class="absolute left-1/2 -translate-x-1/2 top-0 h-6 w-32 rounded-b-2xl bg-black/90 border-x border-b border-surface-3"></div>

        <!-- внутренний экран -->
        <div class="absolute inset-2 sm:inset-3 rounded-[28px] overflow-hidden bg-black">
          <!-- loader -->
          <div id="pm-loading" class="absolute inset-0 grid place-items-center text-textc-dim text-sm z-[1]">
            Загружаем демо…
          </div>
          <!-- iframe (без same-origin для безопасности) -->
          <iframe id="pm-iframe" class="w-full h-full block"
            loading="lazy" referrerpolicy="no-referrer"
            sandbox="allow-scripts allow-pointer-lock allow-forms"></iframe>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Данные -->
<script id="pm-data" type="application/json">{itemsJson}</script>

<!-- Клиентский код -->
<script is:inline>
  (function () {
    const modal = document.getElementById('playable-modal');
    const dataEl = document.getElementById('pm-data');
    if (!modal || !dataEl) return;

    /** @type {{id:string,title:string,src:string}[]} */
    let catalog = [];
    try { catalog = JSON.parse(dataEl.textContent || '[]'); } catch {}

    const iframe   = document.getElementById('pm-iframe');
    const closeBtn = document.getElementById('pm-close');
    const prevBtn  = document.getElementById('pm-prev');
    const nextBtn  = document.getElementById('pm-next');
    const titleEl  = document.getElementById('pm-title');
    const loading  = document.getElementById('pm-loading');

    if (!iframe || !closeBtn || !prevBtn || !nextBtn || !titleEl || !loading) return;

    // Определяем "телефон": тач + узкий экран или явный mobile UA
    const isPhone = () => {
      const mm = matchMedia('(max-width: 820px)');
      const coarse = matchMedia('(pointer: coarse)');
      const ua = navigator.userAgent || '';
      const uaMobile = /Android|iPhone|iPad|iPod|Mobile/i.test(ua);
      return (coarse.matches && mm.matches) || uaMobile;
    };

    let idx = -1, touchStartX = 0;

    function lockScroll(lock) {
      document.documentElement.style.overflow = lock ? 'hidden' : '';
      document.body.style.overflow = lock ? 'hidden' : '';
    }

    function openItem(item) {
      if (!item || !item.src) return;
      if (isPhone()) {
        // На телефоне — сразу новая вкладка
        window.open(item.src, '_blank', 'noopener,noreferrer');
        return;
      }
      // На ПК — модалка с рамкой
      modal.classList.remove('hidden');
      lockScroll(true);
      loading.style.display = 'grid';
      titleEl.textContent = item.title || 'Playable';
      try { iframe.src = ''; } catch {}
      requestAnimationFrame(() => {
        iframe.onload = () => { loading.style.display = 'none'; };
        iframe.src = item.src;
      });
    }

    function findIndexById(id) {
      const i = catalog.findIndex(x => x.id === id);
      return i < 0 ? 0 : i;
    }

    function close() {
      modal.classList.add('hidden');
      lockScroll(false);
      loading.style.display = 'none';
      try { iframe.src = ''; } catch {}
    }

    function prev() {
      if (catalog.length === 0 || isPhone()) return;
      if (idx <= 0) idx = catalog.length - 1; else idx--;
      openItem(catalog[idx]);
    }
    function next() {
      if (catalog.length === 0 || isPhone()) return;
      idx = (idx + 1) % catalog.length;
      openItem(catalog[idx]);
    }

    // Controls
    closeBtn.addEventListener('click', close);
    prevBtn.addEventListener('click', prev);
    nextBtn.addEventListener('click', next);
    modal.addEventListener('click', (e) => { if (e.target === modal) close(); });

    // Keys (только на десктопе)
    window.addEventListener('keydown', (e) => {
      if (isPhone() || modal.classList.contains('hidden')) return;
      if (e.key === 'Escape') close();
      if (e.key === 'ArrowLeft') prev();
      if (e.key === 'ArrowRight') next();
    });

    // Touch swipe (для модалки на планшете/десктопе с тачпадом)
    modal.addEventListener('touchstart', (e) => { touchStartX = e.touches[0].clientX; }, {passive:true});
    modal.addEventListener('touchend', (e) => {
      const dx = e.changedTouches[0].clientX - touchStartX;
      if (Math.abs(dx) > 60) { dx > 0 ? prev() : next(); }
    }, {passive:true});

    // Делегирование: кнопка/элемент с data-play-*
    document.addEventListener('click', (e) => {
      const t = /** @type {HTMLElement} */(e.target);
      const el = t.closest?.('[data-play-id],[data-play-src]');
      if (!el) return;

      e.preventDefault();

      const playId   = el.getAttribute('data-play-id') || '';
      const playSrc  = el.getAttribute('data-play-src') || '';
      const playName = el.getAttribute('data-play-title') || 'Playable';
      const href     = (el instanceof HTMLAnchorElement && el.href) ? el.href : '';

      if (playSrc) {
        idx = findIndexById(playId);
        openItem({ id: playId, title: playName, src: playSrc });
        return;
      }
      if (playId) {
        const found = catalog.find(x => x.id === playId);
        if (found) {
          idx = findIndexById(playId);
          openItem(found);
          return;
        }
      }
      if (href) window.open(href, isPhone() ? '_blank' : '_self');
    });
  })();
</script>
